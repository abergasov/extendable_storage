// Code generated by MockGen. DO NOT EDIT.
// Source: abstract.go
//
// Generated by this command:
//
//	mockgen -source=abstract.go -destination=abstract_mock.go -package=storager
//
// Package storager is a generated GoMock package.
package storager

import (
	entities "extendable_storage/internal/entities"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDataKeeper is a mock of DataKeeper interface.
type MockDataKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockDataKeeperMockRecorder
}

// MockDataKeeperMockRecorder is the mock recorder for MockDataKeeper.
type MockDataKeeperMockRecorder struct {
	mock *MockDataKeeper
}

// NewMockDataKeeper creates a new mock instance.
func NewMockDataKeeper(ctrl *gomock.Controller) *MockDataKeeper {
	mock := &MockDataKeeper{ctrl: ctrl}
	mock.recorder = &MockDataKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataKeeper) EXPECT() *MockDataKeeperMockRecorder {
	return m.recorder
}

// CheckFilesExistence mocks base method.
func (m *MockDataKeeper) CheckFilesExistence(chunks []*entities.FileChunk) (map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckFilesExistence", chunks)
	ret0, _ := ret[0].(map[string]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckFilesExistence indicates an expected call of CheckFilesExistence.
func (mr *MockDataKeeperMockRecorder) CheckFilesExistence(chunks any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckFilesExistence", reflect.TypeOf((*MockDataKeeper)(nil).CheckFilesExistence), chunks)
}

// GetFile mocks base method.
func (m *MockDataKeeper) GetFile(chunk *entities.FileChunk) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", chunk)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile.
func (mr *MockDataKeeperMockRecorder) GetFile(chunk any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockDataKeeper)(nil).GetFile), chunk)
}

// GetUsage mocks base method.
func (m *MockDataKeeper) GetUsage() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsage")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsage indicates an expected call of GetUsage.
func (mr *MockDataKeeperMockRecorder) GetUsage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsage", reflect.TypeOf((*MockDataKeeper)(nil).GetUsage))
}

// PurgeFileChunks mocks base method.
func (m *MockDataKeeper) PurgeFileChunks(chunks []*entities.FileChunk) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurgeFileChunks", chunks)
	ret0, _ := ret[0].(error)
	return ret0
}

// PurgeFileChunks indicates an expected call of PurgeFileChunks.
func (mr *MockDataKeeperMockRecorder) PurgeFileChunks(chunks any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgeFileChunks", reflect.TypeOf((*MockDataKeeper)(nil).PurgeFileChunks), chunks)
}

// SaveFile mocks base method.
func (m *MockDataKeeper) SaveFile(chunk *entities.FileChunk, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFile", chunk, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFile indicates an expected call of SaveFile.
func (mr *MockDataKeeperMockRecorder) SaveFile(chunk, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFile", reflect.TypeOf((*MockDataKeeper)(nil).SaveFile), chunk, data)
}

// SaveFromSource mocks base method.
func (m *MockDataKeeper) SaveFromSource(chunks []*entities.FileChunk, source string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFromSource", chunks, source)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFromSource indicates an expected call of SaveFromSource.
func (mr *MockDataKeeperMockRecorder) SaveFromSource(chunks, source any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFromSource", reflect.TypeOf((*MockDataKeeper)(nil).SaveFromSource), chunks, source)
}
